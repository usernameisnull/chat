# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import model_pb2 as model__pb2


class NodeStub(object):
  """This is the single method that needs to be implemented by a gRPC client.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.MessageLoop = channel.stream_stream(
        '/pbx.Node/MessageLoop',
        request_serializer=model__pb2.ClientMsg.SerializeToString,
        response_deserializer=model__pb2.ServerMsg.FromString,
        )


class NodeServicer(object):
  """This is the single method that needs to be implemented by a gRPC client.
  """

  def MessageLoop(self, request_iterator, context):
    """Client sends a stream of ClientMsg, server responds with a stream of ServerMsg
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_NodeServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'MessageLoop': grpc.stream_stream_rpc_method_handler(
          servicer.MessageLoop,
          request_deserializer=model__pb2.ClientMsg.FromString,
          response_serializer=model__pb2.ServerMsg.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'pbx.Node', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class PluginStub(object):
  """Plugin interface.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.ClientMessage = channel.unary_unary(
        '/pbx.Plugin/ClientMessage',
        request_serializer=model__pb2.ClientReq.SerializeToString,
        response_deserializer=model__pb2.ServerCtrl.FromString,
        )
    self.ServerMessage = channel.unary_unary(
        '/pbx.Plugin/ServerMessage',
        request_serializer=model__pb2.ServerMsg.SerializeToString,
        response_deserializer=model__pb2.ServerMsg.FromString,
        )


class PluginServicer(object):
  """Plugin interface.
  """

  def ClientMessage(self, request, context):
    """This plugin method is called for every message received from the client. The method returns
    a ServerCtrl message. ServerCtrl.code is not 0 indicates that no further processing is needed. Server
    will generate a {ctrl} message from ServerCtrl and forward it to the client session. 
    If ServerCtrl.code is 0, the server should continue with default processing of the message.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ServerMessage(self, request, context):
    """This method is called immmediately before a server message is broadcasted to topic subscribers.
    The filter may alter the server message or may request to drop it.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_PluginServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ClientMessage': grpc.unary_unary_rpc_method_handler(
          servicer.ClientMessage,
          request_deserializer=model__pb2.ClientReq.FromString,
          response_serializer=model__pb2.ServerCtrl.SerializeToString,
      ),
      'ServerMessage': grpc.unary_unary_rpc_method_handler(
          servicer.ServerMessage,
          request_deserializer=model__pb2.ServerMsg.FromString,
          response_serializer=model__pb2.ServerMsg.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'pbx.Plugin', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
