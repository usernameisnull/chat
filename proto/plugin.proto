syntax = "proto3";
package plugin;

import "datamodel.proto";

// Interface exported by the server.
service Plugin {
	// This method is called for every message received from the client. The method returns
  	// a ServerCtrl message. ServerCtrl.code is not 0 indicates that no further processing is needed. Server
	// will generate a {ctrl} message from ServerCtrl and forward it to the client session. 
	// If ServerCtrl.code is 0, the server should continue with default processing of the message.
  	rpc HandleMessage(ClientReq) returns (dm.ServerCtrl) {}

	// This method is called immmediately before a server message is broadcasted to topic subscribers.
	// The filter may alter the server message or may request to drop it.
  	rpc FilterMessage(dm.ServerMsg) returns (dm.ServerMsg) {}
}


// Context messages

message Session {
	string session_id = 1;
	string user_id = 2;
	enum AuthLevel {
		NONE = 0;
		ANON = 10;
		AUTH = 20;
		ROOT = 30;
  	}
	AuthLevel auth_level = 3;
	string remote_addr = 4;
	string user_agent = 5;
	string device_id = 6;
	string language = 7;	
}

message Topic {	
	string name = 1;
	string access_auth = 2;
	string access_anon = 3;
	bytes public = 4;
	bytes private = 5;
}

message User {	
	string id = 1;
	string mode_want = 2;
	string mode_given = 3;
	bytes public = 4;
}

message ClientReq {
	dm.ClientMsg msg = 1;
	Session sess = 2;
}
