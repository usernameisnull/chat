# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import model_pb2 as model__pb2


class PluginStub(object):
  """Interface exported by the server.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.HandleMessage = channel.unary_unary(
        '/plugin.Plugin/HandleMessage',
        request_serializer=model__pb2.ClientReq.SerializeToString,
        response_deserializer=model__pb2.ServerCtrl.FromString,
        )
    self.FilterMessage = channel.unary_unary(
        '/plugin.Plugin/FilterMessage',
        request_serializer=model__pb2.ServerMsg.SerializeToString,
        response_deserializer=model__pb2.ServerMsg.FromString,
        )
    self.RequestMessages = channel.unary_stream(
        '/plugin.Plugin/RequestMessages',
        request_serializer=model__pb2.Unused.SerializeToString,
        response_deserializer=model__pb2.ClientReq.FromString,
        )


class PluginServicer(object):
  """Interface exported by the server.
  """

  def HandleMessage(self, request, context):
    """This method is called for every message received from the client. The method returns
    a ServerCtrl message. ServerCtrl.code is not 0 indicates that no further processing is needed. Server
    will generate a {ctrl} message from ServerCtrl and forward it to the client session. 
    If ServerCtrl.code is 0, the server should continue with default processing of the message.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def FilterMessage(self, request, context):
    """This method is called immmediately before a server message is broadcasted to topic subscribers.
    The filter may alter the server message or may request to drop it.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RequestMessages(self, request, context):
    """Tinode server uses this method to ask plugin to inject client-side messages.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_PluginServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'HandleMessage': grpc.unary_unary_rpc_method_handler(
          servicer.HandleMessage,
          request_deserializer=model__pb2.ClientReq.FromString,
          response_serializer=model__pb2.ServerCtrl.SerializeToString,
      ),
      'FilterMessage': grpc.unary_unary_rpc_method_handler(
          servicer.FilterMessage,
          request_deserializer=model__pb2.ServerMsg.FromString,
          response_serializer=model__pb2.ServerMsg.SerializeToString,
      ),
      'RequestMessages': grpc.unary_stream_rpc_method_handler(
          servicer.RequestMessages,
          request_deserializer=model__pb2.Unused.FromString,
          response_serializer=model__pb2.ClientReq.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'plugin.Plugin', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
